{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1clINorKvTW9Zw45VnRFGOeND_DQy10s0","timestamp":1703534425453}],"collapsed_sections":["1_1QVE8rpZus","zcKl0D9stzNB","VBjs0haAt97E","g9S8OmKGrUaC","VWSXzoFQLI7C","5xQrX3Guva23","LWkf_beSvjwd","sFtBje1swPEk","MPH4QLwRwRyM"]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"1_1QVE8rpZus"},"source":["## 1. Download packages and Mount the drive"]},{"cell_type":"markdown","metadata":{"id":"zcKl0D9stzNB"},"source":["### Get requirement.txt for downloading required packages\n","\n"]},{"cell_type":"code","metadata":{"id":"LFaZ-e7-tHtj","executionInfo":{"status":"ok","timestamp":1603943532277,"user_tz":-345,"elapsed":1024,"user":{"displayName":"AMRIT ARYAL","photoUrl":"","userId":"14502940922965923075"}},"outputId":"235bc75d-856a-4a8d-ec5c-3e1c486315fc","colab":{"base_uri":"https://localhost:8080/"}},"source":["!wget https://raw.githubusercontent.com/Amritaryal44/Video-Steganography/master/requirements.txt"],"execution_count":null,"outputs":[{"output_type":"stream","text":["--2020-10-29 03:52:11--  https://raw.githubusercontent.com/Amritaryal44/Video-Steganography/master/requirements.txt\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 193 [text/plain]\n","Saving to: ‘requirements.txt.1’\n","\n","\rrequirements.txt.1    0%[                    ]       0  --.-KB/s               \rrequirements.txt.1  100%[===================>]     193  --.-KB/s    in 0s      \n","\n","2020-10-29 03:52:11 (10.2 MB/s) - ‘requirements.txt.1’ saved [193/193]\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VBjs0haAt97E"},"source":["### Download the packages"]},{"cell_type":"code","metadata":{"id":"hUYnBII0uEYC","outputId":"284d0eb1-4218-4510-b270-24d638e5ac39","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install -r requirements.txt"],"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Collecting astroid==2.4.2 (from -r requirements.txt (line 1))\n","  Downloading astroid-2.4.2-py3-none-any.whl (213 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m214.0/214.0 kB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting isort==5.0.8 (from -r requirements.txt (line 2))\n","  Downloading isort-5.0.8-py3-none-any.whl (85 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m85.6/85.6 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting lazy-object-proxy==1.5.0 (from -r requirements.txt (line 3))\n","  Downloading lazy-object-proxy-1.5.0.tar.gz (35 kB)\n","  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Collecting mccabe==0.6.1 (from -r requirements.txt (line 4))\n","  Downloading mccabe-0.6.1-py2.py3-none-any.whl (8.6 kB)\n","Collecting numpy==1.22.0 (from -r requirements.txt (line 5))\n","  Downloading numpy-1.22.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m16.8/16.8 MB\u001b[0m \u001b[31m25.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}]},{"cell_type":"markdown","metadata":{"id":"WTNrx2p9tu_x"},"source":["Install ffmpeg to the system"]},{"cell_type":"code","metadata":{"id":"owKaRKmbIeek","executionInfo":{"status":"ok","timestamp":1603943556732,"user_tz":-345,"elapsed":7545,"user":{"displayName":"AMRIT ARYAL","photoUrl":"","userId":"14502940922965923075"}},"outputId":"3f0077c0-8871-44c2-d3d0-0531f243b74d","colab":{"base_uri":"https://localhost:8080/"}},"source":["!sudo apt-get update\n","!sudo apt-get install ffmpeg"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\r0% [Working]\r            \rGet:1 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]\n","\r0% [Connecting to archive.ubuntu.com (91.189.88.152)] [1 InRelease 2,586 B/88.7\r                                                                               \rGet:2 https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/ InRelease [3,626 B]\n","\r0% [Waiting for headers] [1 InRelease 48.9 kB/88.7 kB 55%] [2 InRelease 3,626 B\r0% [Waiting for headers] [1 InRelease 72.1 kB/88.7 kB 81%] [Waiting for headers\r                                                                               \rIgn:3 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease\n","Get:4 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic InRelease [15.9 kB]\n","Ign:5 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  InRelease\n","Hit:6 http://archive.ubuntu.com/ubuntu bionic InRelease\n","Get:7 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release [697 B]\n","Get:8 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release [564 B]\n","Get:9 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release.gpg [836 B]\n","Get:10 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release.gpg [833 B]\n","Get:11 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]\n","Get:12 https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/ Packages [39.3 kB]\n","Hit:13 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic InRelease\n","Get:14 http://security.ubuntu.com/ubuntu bionic-security/multiverse amd64 Packages [15.4 kB]\n","Get:15 http://security.ubuntu.com/ubuntu bionic-security/restricted amd64 Packages [213 kB]\n","Get:16 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [1,748 kB]\n","Get:17 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [1,353 kB]\n","Get:18 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]\n","Ign:19 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Packages\n","Get:19 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Packages [370 kB]\n","Get:20 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Packages [57.0 kB]\n","Get:21 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main Sources [1,685 kB]\n","Get:22 http://archive.ubuntu.com/ubuntu bionic-updates/restricted amd64 Packages [239 kB]\n","Get:23 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [2,165 kB]\n","Get:24 http://archive.ubuntu.com/ubuntu bionic-updates/multiverse amd64 Packages [45.9 kB]\n","Get:25 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [2,115 kB]\n","Get:26 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main amd64 Packages [863 kB]\n","Fetched 11.2 MB in 3s (4,305 kB/s)\n","Reading package lists... Done\n","Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","ffmpeg is already the newest version (7:3.4.8-0ubuntu0.2).\n","0 upgraded, 0 newly installed, 0 to remove and 63 not upgraded.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Abo0mAIVteRj"},"source":["Connect Google drive with Colab"]},{"cell_type":"code","metadata":{"id":"cLI0WYvyIkoX","executionInfo":{"status":"ok","timestamp":1603943591355,"user_tz":-345,"elapsed":28873,"user":{"displayName":"AMRIT ARYAL","photoUrl":"","userId":"14502940922965923075"}},"outputId":"a34b8237-b209-48d2-d4fb-0992813e8f35","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"g9S8OmKGrUaC"},"source":["### Import important packages"]},{"cell_type":"code","metadata":{"id":"p-kKlPPypt7v"},"source":["import cv2\n","import numpy as np\n","import subprocess\n","import os\n","from tqdm import tqdm\n","import wave\n","\n","# path of mounted drive\n","drive_path = '/content/drive/My Drive/'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VWSXzoFQLI7C"},"source":["## 2. For encryption, Run the following cells"]},{"cell_type":"markdown","metadata":{"id":"G_qZR5Ezp3FA"},"source":["### Path to the videos"]},{"cell_type":"code","metadata":{"id":"QIgNPCX6p2UX"},"source":["# path of cover video and secret video\n","cover_path = \"videos/random_vid.mp4\" # path to the video where you want to hide your secret video\n","secret_path = \"videos/secret.mp4\" # path to the video which you want to hide\n","\n","cover_path = drive_path+cover_path\n","secret_path = drive_path+secret_path"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5xQrX3Guva23"},"source":["### Processing for encryption"]},{"cell_type":"code","metadata":{"id":"WTIfq5Ri-VOH","executionInfo":{"status":"ok","timestamp":1603943659957,"user_tz":-345,"elapsed":18510,"user":{"displayName":"AMRIT ARYAL","photoUrl":"","userId":"14502940922965923075"}},"outputId":"18f6f85f-f6de-47d8-bb3e-2cc67bbf526e","colab":{"base_uri":"https://localhost:8080/"}},"source":["# configure for encryption\n","if not os.path.exists(\"enc\"): os.mkdir(\"enc\")\n","if not os.path.exists(\"out\"): os.mkdir(\"out\")\n","\n","# counting the frame to tract the position\n","fn = 0\n","\n","# -- resize keeping aspect ratio constant -- #\n","def resize(src, w=None, h=None, ar=None):\n","    \"\"\"\n","    Resizes keeping aspect ratio\n","    src: Source File\n","    w: Width to be reached\n","    h: Height to be reached\n","    ar: aspect ratio for operation\n","    \"\"\"\n","\n","    if w is not None and h is not None:\n","        return cv2.resize(src, (w, h))\n","    assert(ar != None)\n","    if w is not None:\n","        return cv2.resize(src, (w, int(w/ar)))\n","    if h is not None:\n","        return cv2.resize(src, (int(h*ar), h))\n","\n","# Video Objects for src and secret\n","src = cv2.VideoCapture(cover_path)\n","src_w = int(src.get(3))\n","src_h = int(src.get(4))\n","src_fps = src.get(cv2.CAP_PROP_FPS)\n","src_frame_cnt = src.get(cv2.CAP_PROP_FRAME_COUNT)\n","\n","sec = cv2.VideoCapture(secret_path)\n","sec_w = int(sec.get(3))\n","sec_h = int(sec.get(4))\n","sec_fps = sec.get(cv2.CAP_PROP_FPS)\n","sec_frame_cnt = sec.get(cv2.CAP_PROP_FRAME_COUNT)\n","\n","if src_frame_cnt < sec_frame_cnt:\n","    print(\"please choose the cover video with higher duration length than secret video\")\n","    exit()\n","\n","# working with audio\n","sec_duration = sec_frame_cnt/sec_fps\n","!ffmpeg -ss 0 -t '$sec_duration' -i '$cover_path' enc/cvr.wav\n","!ffmpeg -ss 0 -t '$sec_duration' -i '$secret_path' enc/scr.wav\n","\n","# encoding audio\n","# well this technique is very noisy for audio encryption\n","with wave.open(\"enc/enc.wav\", 'wb') as e:\n","    s = wave.open(\"enc/scr.wav\", 'rb')\n","    c = wave.open(\"enc/cvr.wav\", 'rb')\n","    s_frames = np.array(list(s.readframes(s.getnframes())), dtype='uint8')\n","    c_frames = np.array(list(c.readframes(c.getnframes())), dtype='uint8')\n","\n","     # make the shape of frames same\n","    if s_frames.shape[0]>c_frames.shape[0]:\n","      c_frames = np.concatenate((c_frames, np.zeros((s_frames.shape[0]-c_frames.shape[0],), dtype='uint8')), axis=0)\n","    elif s_frames.shape[0]<c_frames.shape[0]:\n","      s_frames = np.concatenate((s_frames, np.zeros((c_frames.shape[0]-s_frames.shape[0],), dtype='uint8')), axis=0)\n","\n","    # encryption of audio\n","    enc_frames = (c_frames&0b11110000)|(s_frames&0b11110000)>>4\n","\n","    e.setparams(s.getparams())\n","    e.writeframes(np.ndarray.tobytes(enc_frames))\n","\n","    s.close()\n","    c.close()\n","\n","# create a progress bar\n","pbar = tqdm(total=sec_frame_cnt*2, unit='frames')\n","\n","while(1):\n","    _, src_frame = src.read()\n","    ret, sec_frame = sec.read()\n","\n","    if ret == False:\n","\t    break\n","\n","    # get aspect ratio\n","    src_ar = src_w/src_h\n","    sec_ar = sec_w/sec_h\n","\n","    # secret video may loose video quality if its resolution is higher then cover video\n","    # -- fit the cover frame -- #\n","    if src_ar == sec_ar and src_frame.shape < sec_frame.shape:\n","        sec_frame = resize(sec_frame, src_w, src_h)\n","    elif src_ar != sec_ar and (src_w < sec_w or src_h < sec_h):\n","        if sec_w>sec_h:\n","            sec_frame = resize(sec_frame, w=src_w, ar=sec_ar)\n","            if sec_frame.shape[0]>src_h:\n","                sec_frame = resize(sec_frame, h=src_h, ar=sec_ar)\n","        else:\n","            sec_frame = resize(sec_frame, h=src_h, ar=sec_ar)\n","            if sec_frame.shape[1]>src_w:\n","                sec_frame = resize(sec_frame, w=src_w, ar=sec_ar)\n","\n","    # -- fill the remaining pixel with black color -- #\n","    sec_frame = cv2.hconcat([sec_frame, np.zeros((sec_frame.shape[0], src_w-sec_frame.shape[1], 3), dtype='uint8')])\n","    sec_frame = cv2.vconcat([sec_frame, np.zeros((src_h-sec_frame.shape[0], sec_frame.shape[1], 3), dtype='uint8')])\n","\n","    # -- encryption for LSB 2 bits -- #\n","    encrypted_img = (src_frame&0b11111100)|(sec_frame>>4&0b00000011)\n","    fn = fn + 1\n","    cv2.imwrite(\"enc/{}.png\".format(fn), encrypted_img)\n","\n","    # -- encryption for 3rd and 4th bits from LSB side-- #\n","    encrypted_img = (src_frame&0b11111100)|(sec_frame>>6)\n","    fn = fn + 1\n","    cv2.imwrite(\"enc/{}.png\".format(fn), encrypted_img)\n","\n","    pbar.update(2)\n","\n","pbar.close()\n","\n","src.release()\n","sec.release()\n","\n","# delete encrypted video if already exists\n","if os.path.exists(\"out/covered.mkv\"): subprocess.call(\"rm -r out/covered.mkv\", shell=True)\n","\n","# save the video using ffmpeg as a lossless video\n","# frame rate is doubled to preserve the speed of cover video\n","save_vid = \"ffmpeg -framerate {} -i enc/%d.png -i enc/enc.wav -c:v copy -c:av copy out/covered.mkv\".format(src_fps*2)\n","subprocess.call(save_vid, shell=True)\n","\n","# delete the temporary image sequence folder\n","subprocess.call(\"rm -r enc\", shell=True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["ffmpeg version 3.4.8-0ubuntu0.2 Copyright (c) 2000-2020 the FFmpeg developers\n","  built with gcc 7 (Ubuntu 7.5.0-3ubuntu1~18.04)\n","  configuration: --prefix=/usr --extra-version=0ubuntu0.2 --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --enable-gpl --disable-stripping --enable-avresample --enable-avisynth --enable-gnutls --enable-ladspa --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librubberband --enable-librsvg --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzmq --enable-libzvbi --enable-omx --enable-openal --enable-opengl --enable-sdl2 --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libopencv --enable-libx264 --enable-shared\n","  libavutil      55. 78.100 / 55. 78.100\n","  libavcodec     57.107.100 / 57.107.100\n","  libavformat    57. 83.100 / 57. 83.100\n","  libavdevice    57. 10.100 / 57. 10.100\n","  libavfilter     6.107.100 /  6.107.100\n","  libavresample   3.  7.  0 /  3.  7.  0\n","  libswscale      4.  8.100 /  4.  8.100\n","  libswresample   2.  9.100 /  2.  9.100\n","  libpostproc    54.  7.100 / 54.  7.100\n","Input #0, mov,mp4,m4a,3gp,3g2,mj2, from '/content/drive/My Drive/videos/random_vid.mp4':\n","  Metadata:\n","    major_brand     : mp42\n","    minor_version   : 0\n","    compatible_brands: isommp42\n","    creation_time   : 2020-10-28T11:18:19.000000Z\n","    com.android.version: 10\n","  Duration: 00:00:07.94, start: 0.000000, bitrate: 13382 kb/s\n","    Stream #0:0(eng): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, mono, fltp, 64 kb/s (default)\n","    Metadata:\n","      creation_time   : 2020-10-28T11:18:19.000000Z\n","      handler_name    : SoundHandle\n","    Stream #0:1(eng): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, smpte170m/bt470bg/smpte170m), 1080x1920, 13334 kb/s, SAR 1:1 DAR 9:16, 19.57 fps, 90k tbr, 90k tbn, 180k tbc (default)\n","    Metadata:\n","      creation_time   : 2020-10-28T11:18:19.000000Z\n","      handler_name    : VideoHandle\n","Stream mapping:\n","  Stream #0:0 -> #0:0 (aac (native) -> pcm_s16le (native))\n","Press [q] to stop, [?] for help\n","Output #0, wav, to 'enc/cvr.wav':\n","  Metadata:\n","    major_brand     : mp42\n","    minor_version   : 0\n","    compatible_brands: isommp42\n","    com.android.version: 10\n","    ISFT            : Lavf57.83.100\n","    Stream #0:0(eng): Audio: pcm_s16le ([1][0][0][0] / 0x0001), 44100 Hz, mono, s16, 705 kb/s (default)\n","    Metadata:\n","      creation_time   : 2020-10-28T11:18:19.000000Z\n","      handler_name    : SoundHandle\n","      encoder         : Lavc57.107.100 pcm_s16le\n","size=     272kB time=00:00:03.07 bitrate= 723.9kbits/s speed= 150x    \n","video:0kB audio:272kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.028048%\n","ffmpeg version 3.4.8-0ubuntu0.2 Copyright (c) 2000-2020 the FFmpeg developers\n","  built with gcc 7 (Ubuntu 7.5.0-3ubuntu1~18.04)\n","  configuration: --prefix=/usr --extra-version=0ubuntu0.2 --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --enable-gpl --disable-stripping --enable-avresample --enable-avisynth --enable-gnutls --enable-ladspa --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librubberband --enable-librsvg --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzmq --enable-libzvbi --enable-omx --enable-openal --enable-opengl --enable-sdl2 --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libopencv --enable-libx264 --enable-shared\n","  libavutil      55. 78.100 / 55. 78.100\n","  libavcodec     57.107.100 / 57.107.100\n","  libavformat    57. 83.100 / 57. 83.100\n","  libavdevice    57. 10.100 / 57. 10.100\n","  libavfilter     6.107.100 /  6.107.100\n","  libavresample   3.  7.  0 /  3.  7.  0\n","  libswscale      4.  8.100 /  4.  8.100\n","  libswresample   2.  9.100 /  2.  9.100\n","  libpostproc    54.  7.100 / 54.  7.100\n","Input #0, mov,mp4,m4a,3gp,3g2,mj2, from '/content/drive/My Drive/videos/secret.mp4':\n","  Metadata:\n","    major_brand     : mp42\n","    minor_version   : 0\n","    compatible_brands: isommp42\n","    creation_time   : 2020-10-28T11:06:39.000000Z\n","    com.android.version: 10\n","  Duration: 00:00:03.07, start: 0.000000, bitrate: 13255 kb/s\n","    Stream #0:0(eng): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, mono, fltp, 64 kb/s (default)\n","    Metadata:\n","      creation_time   : 2020-10-28T11:06:39.000000Z\n","      handler_name    : SoundHandle\n","    Stream #0:1(eng): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, smpte170m/bt470bg/smpte170m), 1080x1920, 13173 kb/s, SAR 1:1 DAR 9:16, 16.26 fps, 90k tbr, 90k tbn, 180k tbc (default)\n","    Metadata:\n","      creation_time   : 2020-10-28T11:06:39.000000Z\n","      handler_name    : VideoHandle\n","Stream mapping:\n","  Stream #0:0 -> #0:0 (aac (native) -> pcm_s16le (native))\n","Press [q] to stop, [?] for help\n","Output #0, wav, to 'enc/scr.wav':\n","  Metadata:\n","    major_brand     : mp42\n","    minor_version   : 0\n","    compatible_brands: isommp42\n","    com.android.version: 10\n","    ISFT            : Lavf57.83.100\n","    Stream #0:0(eng): Audio: pcm_s16le ([1][0][0][0] / 0x0001), 44100 Hz, mono, s16, 705 kb/s (default)\n","    Metadata:\n","      creation_time   : 2020-10-28T11:06:39.000000Z\n","      handler_name    : SoundHandle\n","      encoder         : Lavc57.107.100 pcm_s16le\n","size=     262kB time=00:00:03.04 bitrate= 704.9kbits/s speed= 675x    \n","video:0kB audio:262kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.029073%\n"],"name":"stdout"},{"output_type":"stream","text":[" 98%|█████████▊| 98/100.0 [00:10<00:00,  9.05frames/s]\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"xW6XnIUAYyeK"},"source":["### Save the encrypted video in Drive"]},{"cell_type":"code","metadata":{"id":"_t6Du1g8Y5tH"},"source":["!cp 'out/covered.mkv' '/content/drive/My Drive/covered.mkv'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LWkf_beSvjwd"},"source":["### Download the encrypted video"]},{"cell_type":"code","metadata":{"id":"xwFiIuQKv735","executionInfo":{"status":"ok","timestamp":1603891334124,"user_tz":-345,"elapsed":1414,"user":{"displayName":"AMRIT ARYAL","photoUrl":"","userId":"14502940922965923075"}},"outputId":"a6363404-f0ef-4018-cd45-537cb2e0a4d9","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import files\n","files.download('out/covered.mkv')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_5062d6f8-a6a0-49b1-b411-38576801974d\", \"covered.mkv\", 116305321)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"I6ATNNwqqvOp"},"source":["## 3. For decryption, Run the following cells"]},{"cell_type":"markdown","metadata":{"id":"UGXRP-A9q4kP"},"source":["### Path of the encrypted video"]},{"cell_type":"code","metadata":{"id":"bq0FSYPSqxka"},"source":["# upload the video to drive  and give\n","# path to encrypted file\n","enc_path = \"covered.mkv\" # for testing, you can use \"out/covered.mkv\"\n","\n","enc_path = drive_path + enc_path"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sFtBje1swPEk"},"source":["\n","### Decyprtion Process"]},{"cell_type":"code","metadata":{"id":"0MocK6YcvMzb","executionInfo":{"status":"ok","timestamp":1603943765386,"user_tz":-345,"elapsed":7928,"user":{"displayName":"AMRIT ARYAL","photoUrl":"","userId":"14502940922965923075"}},"outputId":"dcf2a479-f5eb-43ec-d5ca-afd7566a8556","colab":{"base_uri":"https://localhost:8080/"}},"source":["# configure for encryption\n","if not os.path.exists(\"enc\"): os.mkdir(\"enc\")\n","if not os.path.exists(\"out\"): os.mkdir(\"out\")\n","\n","# read the encrypted video file\n","enc = cv2.VideoCapture(enc_path)\n","enc_w = int(enc.get(3))\n","enc_h = int(enc.get(4))\n","enc_fps = enc.get(cv2.CAP_PROP_FPS)\n","enc_frame_cnt = enc.get(cv2.CAP_PROP_FRAME_COUNT)\n","\n","# video writer for decoding secret video\n","out = cv2.VideoWriter('enc/decrypted_secret.avi', cv2.VideoWriter_fourcc(*\"MJPG\"), enc_fps/2, (enc_w, enc_h))\n","\n","# working with audio\n","!ffmpeg -i '$enc_path' 'enc/enc.wav'\n","\n","# decoding audio file\n","with wave.open(\"enc/dec.wav\", 'wb') as d:\n","    e = wave.open(\"enc/enc.wav\", 'rb')\n","    e_frames = np.array(list(e.readframes(e.getnframes())), dtype='uint8')\n","\n","    # decryption of audio\n","    dec_frames = (e_frames&0b00001111)<<4\n","\n","    d.setparams(e.getparams())\n","    d.writeframes(np.ndarray.tobytes(dec_frames))\n","\n","    e.close()\n","\n","# frame number\n","fn = 0\n","\n","# create a progress bar\n","pbar = tqdm(total=enc_frame_cnt, unit='frames')\n","\n","while (1):\n","    # let's take the decrypted image\n","    ret, frame = enc.read()\n","\n","    if ret == False:\n","        break\n","\n","    fn = fn + 1\n","\n","    # for even frames, lower 2 bits are extracted\n","    # for odd frames, 3rd and 4th bits are extracted\n","    if (fn%2):\n","        decrypted_frame = (frame&0b00000011)<<4\n","    else:\n","        decrypted_frame = decrypted_frame|(frame&0b00000011)<<6\n","        out.write(decrypted_frame)\n","\n","    pbar.update(1)\n","\n","enc.release()\n","out.release()\n","\n","# delete decrypted video if already exists\n","if os.path.exists(\"out/secret_revealed.mkv\"): subprocess.call(\"rm -r out/secret_revealed.mkv\", shell=True)\n","\n","# save the secret video to a file\n","save_vid = \"ffmpeg -i enc/decrypted_secret.avi -i enc/dec.wav -c:v copy out/secret_revealed.mkv\"\n","subprocess.call(save_vid, shell=True)\n","\n","# delete the temporary folder\n","subprocess.call(\"rm -r enc\", shell=True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["ffmpeg version 3.4.8-0ubuntu0.2 Copyright (c) 2000-2020 the FFmpeg developers\n","  built with gcc 7 (Ubuntu 7.5.0-3ubuntu1~18.04)\n","  configuration: --prefix=/usr --extra-version=0ubuntu0.2 --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --enable-gpl --disable-stripping --enable-avresample --enable-avisynth --enable-gnutls --enable-ladspa --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librubberband --enable-librsvg --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzmq --enable-libzvbi --enable-omx --enable-openal --enable-opengl --enable-sdl2 --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libopencv --enable-libx264 --enable-shared\n","  libavutil      55. 78.100 / 55. 78.100\n","  libavcodec     57.107.100 / 57.107.100\n","  libavformat    57. 83.100 / 57. 83.100\n","  libavdevice    57. 10.100 / 57. 10.100\n","  libavfilter     6.107.100 /  6.107.100\n","  libavresample   3.  7.  0 /  3.  7.  0\n","  libswscale      4.  8.100 /  4.  8.100\n","  libswresample   2.  9.100 /  2.  9.100\n","  libpostproc    54.  7.100 / 54.  7.100\n","\u001b[0;33mGuessed Channel Layout for Input Stream #0.1 : mono\n","\u001b[0mInput #0, matroska,webm, from '/content/drive/My Drive/covered.mkv':\n","  Metadata:\n","    ENCODER         : Lavf57.83.100\n","  Duration: 00:00:03.15, start: 0.000000, bitrate: 295097 kb/s\n","    Stream #0:0: Video: png (MPNG / 0x474E504D), rgb24(pc), 1080x1920, 39 fps, 39 tbr, 1k tbn, 1k tbc (default)\n","    Metadata:\n","      DURATION        : 00:00:02.504000000\n","    Stream #0:1: Audio: pcm_s16le, 44100 Hz, mono, s16, 705 kb/s (default)\n","    Metadata:\n","      DURATION        : 00:00:03.153000000\n","Stream mapping:\n","  Stream #0:1 -> #0:0 (pcm_s16le (native) -> pcm_s16le (native))\n","Press [q] to stop, [?] for help\n","Output #0, wav, to 'enc/enc.wav':\n","  Metadata:\n","    ISFT            : Lavf57.83.100\n","    Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 44100 Hz, mono, s16, 705 kb/s (default)\n","    Metadata:\n","      DURATION        : 00:00:03.153000000\n","      encoder         : Lavc57.107.100 pcm_s16le\n","size=     272kB time=00:00:03.15 bitrate= 705.8kbits/s speed=  19x    \n","video:0kB audio:272kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.028048%\n"],"name":"stdout"},{"output_type":"stream","text":[" 78%|███████▊  | 96/123.0 [00:04<00:01, 19.24frames/s]"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"bKhtqFRsdRCB"},"source":["### Save decrytped video to the drive"]},{"cell_type":"code","metadata":{"id":"9WCK36JqdWB4"},"source":["!cp 'out/secret_revealed.mkv' '/content/drive/My Drive/secret_revealed.mkv'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MPH4QLwRwRyM"},"source":["### Download decrypted video"]},{"cell_type":"code","metadata":{"id":"4LjjcnsUwT7Q","executionInfo":{"status":"ok","timestamp":1603886539197,"user_tz":-345,"elapsed":1120,"user":{"displayName":"Amrit Aryal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GitHMlLPilee6CYQhzQ36v2wRHVIiKX1Zx6c5Tl=s64","userId":"12582887958569999441"}},"outputId":"50528e51-b257-4868-ce1c-f7e0c6e4a319","colab":{"base_uri":"https://localhost:8080/","height":17}},"source":["from google.colab import files\n","files.download('out/secret_revealed.mkv')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_a683339a-8599-4822-9ff4-921876b1bbb1\", \"secret_revealed.mkv\", 2509522)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"VlBDCOINFlqm"},"source":[],"execution_count":null,"outputs":[]}]}